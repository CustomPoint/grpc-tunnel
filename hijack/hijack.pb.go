// Code generated by protoc-gen-go. DO NOT EDIT.
// source: hijack.proto

package hijack

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the data.
type HelloRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloRequest) Reset()         { *m = HelloRequest{} }
func (m *HelloRequest) String() string { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()    {}
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a87d8f4788b7966, []int{0}
}

func (m *HelloRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloRequest.Unmarshal(m, b)
}
func (m *HelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloRequest.Marshal(b, m, deterministic)
}
func (m *HelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloRequest.Merge(m, src)
}
func (m *HelloRequest) XXX_Size() int {
	return xxx_messageInfo_HelloRequest.Size(m)
}
func (m *HelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HelloRequest proto.InternalMessageInfo

func (m *HelloRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The request message containing the data.
type HelloReply struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReply) Reset()         { *m = HelloReply{} }
func (m *HelloReply) String() string { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()    {}
func (*HelloReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a87d8f4788b7966, []int{1}
}

func (m *HelloReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HelloReply.Unmarshal(m, b)
}
func (m *HelloReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HelloReply.Marshal(b, m, deterministic)
}
func (m *HelloReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReply.Merge(m, src)
}
func (m *HelloReply) XXX_Size() int {
	return xxx_messageInfo_HelloReply.Size(m)
}
func (m *HelloReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReply.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReply proto.InternalMessageInfo

func (m *HelloReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The request message containing the data.
type HRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HRequest) Reset()         { *m = HRequest{} }
func (m *HRequest) String() string { return proto.CompactTextString(m) }
func (*HRequest) ProtoMessage()    {}
func (*HRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a87d8f4788b7966, []int{2}
}

func (m *HRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HRequest.Unmarshal(m, b)
}
func (m *HRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HRequest.Marshal(b, m, deterministic)
}
func (m *HRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HRequest.Merge(m, src)
}
func (m *HRequest) XXX_Size() int {
	return xxx_messageInfo_HRequest.Size(m)
}
func (m *HRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HRequest proto.InternalMessageInfo

func (m *HRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// The response message containing the data.
type HReply struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HReply) Reset()         { *m = HReply{} }
func (m *HReply) String() string { return proto.CompactTextString(m) }
func (*HReply) ProtoMessage()    {}
func (*HReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a87d8f4788b7966, []int{3}
}

func (m *HReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HReply.Unmarshal(m, b)
}
func (m *HReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HReply.Marshal(b, m, deterministic)
}
func (m *HReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HReply.Merge(m, src)
}
func (m *HReply) XXX_Size() int {
	return xxx_messageInfo_HReply.Size(m)
}
func (m *HReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HReply.DiscardUnknown(m)
}

var xxx_messageInfo_HReply proto.InternalMessageInfo

func (m *HReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*HelloRequest)(nil), "hijack.HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "hijack.HelloReply")
	proto.RegisterType((*HRequest)(nil), "hijack.HRequest")
	proto.RegisterType((*HReply)(nil), "hijack.HReply")
}

func init() { proto.RegisterFile("hijack.proto", fileDescriptor_1a87d8f4788b7966) }

var fileDescriptor_1a87d8f4788b7966 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xc8, 0xcc, 0x4a,
	0x4c, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x94, 0xb8, 0x78,
	0x3c, 0x52, 0x73, 0x72, 0xf2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58,
	0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x05, 0x2e,
	0x2e, 0xa8, 0x9a, 0x82, 0x9c, 0x4a, 0xac, 0x2a, 0xe4, 0xb8, 0x38, 0x3c, 0x90, 0x4c, 0x48, 0x49,
	0x2c, 0x49, 0x04, 0xcb, 0xf3, 0x04, 0x81, 0xd9, 0x4a, 0x32, 0x5c, 0x6c, 0x1e, 0x70, 0xdd, 0xe8,
	0xb2, 0x46, 0xa5, 0x5c, 0x9c, 0x1e, 0x21, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x86,
	0x5c, 0xec, 0x1e, 0x21, 0xa5, 0x79, 0x79, 0xa9, 0x39, 0x42, 0x02, 0x7a, 0x50, 0x27, 0xc3, 0xcc,
	0x96, 0xe2, 0x43, 0x12, 0x29, 0xc8, 0xa9, 0x54, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x14, 0x32, 0x05,
	0x69, 0x01, 0xbb, 0x50, 0x48, 0x04, 0xae, 0x00, 0xc9, 0x53, 0x52, 0x42, 0x68, 0xa2, 0x60, 0xad,
	0x4e, 0x7a, 0x5c, 0xe2, 0x99, 0xf9, 0x7a, 0xe9, 0x45, 0x05, 0xc9, 0x7a, 0xa9, 0x15, 0x89, 0xb9,
	0x05, 0x39, 0xa9, 0xc5, 0x50, 0x75, 0x4e, 0x82, 0x1e, 0x60, 0x1a, 0xe2, 0x8e, 0x00, 0x50, 0x80,
	0x05, 0x30, 0x26, 0xb1, 0x81, 0x43, 0xce, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xfa, 0x45,
	0x0c, 0x49, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HTServiceClient is the client API for HTService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HTServiceClient interface {
	// Sends & Receive data
	HTunnel(ctx context.Context, opts ...grpc.CallOption) (HTService_HTunnelClient, error)
	// Say Hello
	HTHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type hTServiceClient struct {
	cc *grpc.ClientConn
}

func NewHTServiceClient(cc *grpc.ClientConn) HTServiceClient {
	return &hTServiceClient{cc}
}

func (c *hTServiceClient) HTunnel(ctx context.Context, opts ...grpc.CallOption) (HTService_HTunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HTService_serviceDesc.Streams[0], "/hijack.HTService/HTunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &hTServiceHTunnelClient{stream}
	return x, nil
}

type HTService_HTunnelClient interface {
	Send(*HRequest) error
	Recv() (*HReply, error)
	grpc.ClientStream
}

type hTServiceHTunnelClient struct {
	grpc.ClientStream
}

func (x *hTServiceHTunnelClient) Send(m *HRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hTServiceHTunnelClient) Recv() (*HReply, error) {
	m := new(HReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hTServiceClient) HTHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/hijack.HTService/HTHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTServiceServer is the server API for HTService service.
type HTServiceServer interface {
	// Sends & Receive data
	HTunnel(HTService_HTunnelServer) error
	// Say Hello
	HTHello(context.Context, *HelloRequest) (*HelloReply, error)
}

// UnimplementedHTServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHTServiceServer struct {
}

func (*UnimplementedHTServiceServer) HTunnel(srv HTService_HTunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method HTunnel not implemented")
}
func (*UnimplementedHTServiceServer) HTHello(ctx context.Context, req *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HTHello not implemented")
}

func RegisterHTServiceServer(s *grpc.Server, srv HTServiceServer) {
	s.RegisterService(&_HTService_serviceDesc, srv)
}

func _HTService_HTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HTServiceServer).HTunnel(&hTServiceHTunnelServer{stream})
}

type HTService_HTunnelServer interface {
	Send(*HReply) error
	Recv() (*HRequest, error)
	grpc.ServerStream
}

type hTServiceHTunnelServer struct {
	grpc.ServerStream
}

func (x *hTServiceHTunnelServer) Send(m *HReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hTServiceHTunnelServer) Recv() (*HRequest, error) {
	m := new(HRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HTService_HTHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTServiceServer).HTHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hijack.HTService/HTHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTServiceServer).HTHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hijack.HTService",
	HandlerType: (*HTServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HTHello",
			Handler:    _HTService_HTHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HTunnel",
			Handler:       _HTService_HTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hijack.proto",
}
